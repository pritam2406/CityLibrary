

CREATE DATABASE city_library;


CREATE TABLE PERSON ( 
	PID INT NOT NULL AUTO_INCREMENT, 
	PNAME VARCHAR(45), 
	PRIMARY KEY (PID));

CREATE TABLE PUBLISHER (
	PUBLISHERID INT NOT NULL AUTO_INCREMENT, 
	PUBNAME VARCHAR(45), 
	ADDRESS VARCHAR(255), 
	PRIMARY KEY (PUBLISHERID));

CREATE TABLE BRANCH (
	BID INT NOT NULL AUTO_INCREMENT,
	LNAME VARCHAR(45),
	LOCATION VARCHAR(255),
	PRIMARY KEY (BID));

CREATE TABLE READER (
	RID INT NOT NULL AUTO_INCREMENT,
	RTYPE INT,
	RNAME VARCHAR(45),
	RADDRESS VARCHAR(255),
	PHONE_NO VARCHAR(10),
	PRIMARY KEY (RID));


CREATE TABLE DOCUMENT (
	DOCID INT NOT NULL AUTO_INCREMENT, 
	TITLE VARCHAR(255), 
	PDATE DATE, 
	PUBLISHERID INT, 
	PRIMARY KEY (DOCID), 
	FOREIGN KEY (PUBLISHERID) REFERENCES PUBLISHER(PUBLISHERID));


CREATE TABLE BOOK (
	DOCID INT NOT NULL, 
	ISBN VARCHAR(255), 
	PRIMARY KEY(DOCID), 
	FOREIGN KEY (DOCID) REFERENCES DOCUMENT(DOCID));


CREATE TABLE JOURNAL_VOLUME (
	DOCID INT NOT NULL, 
	VOLUME_NO INT, 
	EDITOR INT, 
	PRIMARY KEY(DOCID), 
	FOREIGN KEY (DOCID) REFERENCES DOCUMENT(DOCID),
	FOREIGN KEY (EDITOR) REFERENCES PERSON(PID));



CREATE TABLE JOURNAL_ISSUE (
	DOCID INT NOT NULL, 
	ISSUE_NO INT, 
	SCOPE VARCHAR (255), 
	PRIMARY KEY(DOCID, ISSUE_NO), 
	FOREIGN KEY (DOCID) REFERENCES JOURNAL_VOLUME(DOCID));

CREATE TABLE AUTHORS (
	PID INT NOT NULL,
	DOCID INT NOT NULL,
	PRIMARY KEY (PID, DOCID),
	FOREIGN KEY (PID) REFERENCES PERSON(PID),
	FOREIGN KEY (DOCID) REFERENCES BOOK(DOCID));


		
CREATE TABLE PROCEEDINGS (
	DOCID INT NOT NULL,
	CDATE DATETIME,
	CLOCATION VARCHAR(255),
	CEDITOR INT,
	PRIMARY KEY (DOCID),
	FOREIGN KEY (DOCID) REFERENCES DOCUMENT(DOCID),
	FOREIGN KEY (CEDITOR) REFERENCES PERSON(PID));

		
CREATE TABLE CHAIRS (
	PID INT NOT NULL,
	DOCID INT NOT NULL,
	PRIMARY KEY (PID, DOCID),
	FOREIGN KEY (PID) REFERENCES PERSON(PID),
	FOREIGN KEY (DOCID) REFERENCES PROCEEDINGS(DOCID));
	



CREATE TABLE COPY (
    	COPYNO INT NOT NULL,
	DOCID INT NOT NULL,
	BID INT NOT NULL,
	POSITION VARCHAR(6),
	PRIMARY KEY (COPYNO, DOCID, BID),
	FOREIGN KEY (DOCID) REFERENCES DOCUMENT(DOCID),
	FOREIGN KEY (BID) REFERENCES BRANCH(BID));
	
	

CREATE TABLE BORROWING (
	BOR_NO INT NOT NULL AUTO_INCREMENT,
	BDTIME DATETIME,
	RDTIME DATETIME,
	PRIMARY KEY (BOR_NO));
	

CREATE TABLE RESERVATION (
	RES_NO INT NOT NULL AUTO_INCREMENT,
	DTIME DATETIME,
	PRIMARY KEY (RES_NO));
	
	
	

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
CREATE TABLE RESERVES (
	RES_NO INT NOT NULL,
	DOCID INT NOT NULL,
	COPYNO INT NOT NULL,
	BID INT NOT NULL,
	RID INT,
	PRIMARY KEY (RES_NO, DOCID, COPYNO, BID),
    	FOREIGN KEY (RID) REFERENCES READER(RID) ON DELETE CASCADE,
	FOREIGN KEY (RES_NO) REFERENCES RESERVATION(RES_NO) ON DELETE CASCADE,
	FOREIGN KEY (DOCID) REFERENCES COPY(DOCID),
	FOREIGN KEY (COPYNO) REFERENCES COPY(COPYNO),
	FOREIGN KEY (BID) REFERENCES COPY(BID));
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	
	
CREATE TABLE BORROWS (
	BOR_NO INT NOT NULL,
	DOCID INT NOT NULL,
	COPYNO INT NOT NULL,
	BID INT NOT NULL,
	RID INT,
	PRIMARY KEY (BOR_NO, DOCID, COPYNO, BID),
	FOREIGN KEY (BOR_NO) REFERENCES BORROWING(BOR_NO) ON DELETE CASCADE,
	FOREIGN KEY (DOCID) REFERENCES COPY(DOCID),
	FOREIGN KEY (COPYNO) REFERENCES COPY(COPYNO),
	FOREIGN KEY (BID) REFERENCES COPY(BID),
	FOREIGN KEY (RID) REFERENCES READER(RID) ON DELETE CASCADE);
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


CREATE TABLE GEDITS (
	DOCID INT NOT NULL,
	ISSUE_NO INT NOT NULL,
	PID INT NOT NULL,
	PRIMARY KEY (DOCID, ISSUE_NO, PID),
	FOREIGN KEY (DOCID) REFERENCES JOURNAL_ISSUE(DOCID),
	FOREIGN KEY (ISSUE_NO) REFERENCES JOURNAL_ISSUE(ISSUE_NO),
	FOREIGN KEY (PID) REFERENCES PERSON(PID));
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&	

CREATE TABLE USERS (
	id INT NOT NULL,
	USER_MOBILE_NO VARCHAR(15) NOT NULL,
	PASSWORD VARCHAR(45) NOT NULL,
	RID INT NOT NULL,
	PRIMARY KEY (USER_MOBILE_NO),
	FOREIGN KEY (RID) REFERENCES READER(RID) ON DELETE CASCADE);